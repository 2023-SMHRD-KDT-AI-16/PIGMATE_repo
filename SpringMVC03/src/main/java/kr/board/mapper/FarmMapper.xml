<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.board.mapper.FarmMapper">

	<!-- 농장의 분 단위 환경 정보 가져오기 -->
	<select id="getEnv" parameterType="int"
		resultType="kr.board.entity.FarmEnv">
		SELECT * FROM farm_env_info_time WHERE farm_idx = #{farm_idx}
	</select>

	<!-- 농장의 정보 가져오기 -->
	<select id="getFarmById" parameterType="int"
		resultType="kr.board.entity.Farm">
		SELECT * FROM farm_info WHERE farm_idx = #{farm_idx}
	</select>

	<!-- 농장의 시간 단위 환경 정보 가져오기 -->
	<select id="getHourEnv" parameterType="int"
		resultType="kr.board.entity.FarmEnv">
		SELECT * FROM farm_env_info_hour WHERE farm_idx = #{farm_idx}
	</select>

	<!-- 농장의 하루 단위 환경 정보 가져오기 -->
	<select id="getDailyEnv" parameterType="int"
		resultType="kr.board.entity.FarmEnv">
		SELECT * FROM farm_env_info_day WHERE farm_idx = #{farm_idx}
	</select>

	<!-- 농장의 주 단위 환경 정보 가져오기 -->
	<select id="getWeeklyEnv" parameterType="int"
		resultType="kr.board.entity.FarmEnv">
		SELECT created_at, temperature, humidity, co2, ammonia, pm, #{farm_idx} AS
		farm_idx
		FROM farm_env_info_day
		WHERE farm_idx = #{farm_idx}
		AND created_at >= (SELECT DATE_SUB(MAX(created_at), INTERVAL 28 DAY)
		FROM farm_env_info_day WHERE farm_idx = #{farm_idx})
		ORDER BY created_at
		LIMIT 28
	</select>

	<!-- 농장의 월 단위 환경 정보 가져오기 -->
	<select id="getMonthlyEnv" parameterType="int"
		resultType="kr.board.entity.FarmEnv">
		SELECT * FROM farm_env_info_month WHERE farm_idx = #{farm_idx}
	</select>

	<!-- 회원의 모든 농장 정보 가져오기 -->
	<select id="getFarm" parameterType="String"
		resultType="kr.board.entity.Farm">
		SELECT * FROM farm_info WHERE mem_id = #{mem_id}
	</select>

	<!-- 농장 등록 -->
	<insert id="insertFarm" parameterType="kr.board.entity.Farm">
		INSERT INTO farm_info (farm_name, farm_loc, farm_livestock_cnt, mem_id)
		VALUES (#{farm_name}, #{farm_loc}, #{farm_livestock_cnt}, #{mem_id})
	</insert>

	<!-- 농장 삭제 -->
	<delete id="deletePenInfoByFarmName">
		DELETE FROM pig_info WHERE farm_idx IN (SELECT farm_idx FROM farm_info WHERE
		farm_name = #{farm_name})
	</delete>

	<!-- 농장 환경 기준 지우기 -->
	<delete id="deleteEnvCriteriaByFarmName">
		DELETE FROM env_criteria_info WHERE farm_idx IN (SELECT farm_idx FROM
		farm_info WHERE farm_name = #{farm_name})
	</delete>

	<!-- 농장 이름 지우기 -->
	<delete id="deleteFarmByName" parameterType="String">
		DELETE FROM farm_info WHERE farm_name = #{farm_name}
	</delete>

	<!-- 농장 정보 수정하기 -->
	<update id="updateFarmByOldName"
		parameterType="kr.board.entity.Farm">
		UPDATE farm_info
		SET farm_name = #{newFarmName}, farm_loc = #{farmLoc}, farm_livestock_cnt
		= #{farmLivestockCnt}
		WHERE farm_name = #{oldFarmName}
	</update>

	<!-- 농장 가장 최근 환경 정보 가져오기 -->
	<select id="getLatestEnvironment" parameterType="int"
		resultType="kr.board.entity.FarmEnv">
		SELECT * FROM farm_env_info_time WHERE farm_idx = #{farm_idx} ORDER BY
		created_at DESC LIMIT 1
	</select>

	<!-- 농장의 모든 가축 정보 가져오기 -->
	<select id="getPenInfo" resultType="kr.board.entity.Farm">
		SELECT * FROM pig_info WHERE farm_idx = #{farm_idx}
	</select>

	<!-- 농장 환경 정보 등록 -->
	<insert id="insertFarmEnvTime"
		parameterType="kr.board.entity.FarmEnv">
		INSERT INTO farm_env_info_time (ammonia, co2, humidity, pm, temperature,
		farm_idx)
		VALUES (#{ammonia}, #{co2}, #{humidity}, #{pm}, #{temperature}, #{farm_idx})
	</insert>

	<!-- 특정 날짜의 일별 환경 정보 가져오기 -->
	<select id="getDailyEnvByDate" parameterType="map"
		resultType="kr.board.entity.FarmEnv">
		SELECT * FROM farm_env_info_hour
		WHERE farm_idx = #{farm_idx}
		AND DATE(created_at) = #{date}
	</select>
	
	<!-- month 테이블에 day 테이블 값 넣기 -->
	<insert id="insertMonthTable" parameterType="int">
    <![CDATA[
    INSERT INTO farm_env_info_month (temperature, humidity, co2, ammonia, pm, created_at, farm_idx)
    WITH monthly_averages AS (
        SELECT
            farm_idx,
            DATE_FORMAT(created_at, '%Y-%m-01') AS month,
            AVG(temperature) AS avg_temperature,
            AVG(humidity) AS avg_humidity,
            AVG(co2) AS avg_co2,
            AVG(ammonia) AS avg_ammonia,
            AVG(pm) AS avg_pm
        FROM farm_env_info_day
        WHERE farm_idx = #{farm_idx}
        AND created_at < DATE_FORMAT(NOW(), '%Y-%m-01')
        GROUP BY farm_idx, month
    )
    SELECT
        avg_temperature,
        avg_humidity,
        avg_co2,   
        avg_ammonia,
        avg_pm, 
        month,
        farm_idx
    FROM monthly_averages
    ]]>
</insert>

	
	<!-- day 테이블에 hour 테이블 값 넣기 -->
	<insert id="insertDayTable" parameterType="int">
		<![CDATA[
		INSERT INTO farm_env_info_day (temperature, humidity, co2, ammonia, pm, created_at, farm_idx)
		WITH daily_averages AS (
		    SELECT
		        farm_idx,
		        DATE(created_at) AS date,
		        AVG(temperature) AS avg_temperature,
		        AVG(humidity) AS avg_humidity,
		        AVG(co2) AS avg_co2,
		        AVG(ammonia) AS avg_ammonia,
		        AVG(pm) AS avg_pm
		    FROM farm_env_info_hour
		    WHERE farm_idx = #{farm_idx}
		    AND DATE(created_at) < CURDATE() 
		    GROUP BY farm_idx, DATE(created_at)
		)
		SELECT
		    avg_temperature,
		    avg_humidity,
		    avg_co2,   
		    avg_ammonia,
		    avg_pm, 
		    date,
		    farm_idx
		FROM daily_averages
		]]>
	</insert>
	
	<!-- 시간별 평균 hour 테이블로 이동 -->
	<insert id="insertHourTable" parameterType="int">
		<![CDATA[
		INSERT INTO farm_env_info_hour (temperature, humidity, co2, ammonia, pm, created_at, farm_idx)
		WITH hourly_averages AS (
		    SELECT
		        farm_idx,
		        DATE_FORMAT(created_at, '%Y-%m-%d %H:00:00') AS hour,
		        AVG(temperature) AS avg_temperature,
		        AVG(humidity) AS avg_humidity,
		        AVG(co2) AS avg_co2,
		        AVG(ammonia) AS avg_ammonia,
		        AVG(pm) AS avg_pm
		    FROM farm_env_info_time
		    WHERE farm_idx = #{farm_idx}
		    AND created_at < DATE_SUB(NOW(), INTERVAL 1 HOUR)
		    GROUP BY farm_idx, hour
		)
		SELECT
		    avg_temperature,
		    avg_humidity,
		    avg_co2,   
		    avg_ammonia,
		    avg_pm, 
		    hour,
		    farm_idx
		FROM hourly_averages
		]]>
	</insert>
	
	<!-- time 테이블에서 값 지우기 -->
	<delete id="deleteTimeTable" parameterType="int">
		<![CDATA[
		DELETE FROM farm_env_info_time
		WHERE farm_idx = #{farm_idx}
		AND DATE(created_at) < DATE_SUB(CURDATE(), INTERVAL 1 DAY)
		]]>
	</delete>
	
	<!-- 데이터 존재 여부 확인 쿼리 -->
    <select id="countMonthlyData" parameterType="map" resultType="int">
        <![CDATA[
        SELECT COUNT(*) FROM farm_env_info_month
        WHERE farm_idx = #{farm_idx}
        AND created_at = DATE_FORMAT(#{date}, '%Y-%m-01')
        ]]>
    </select>

    <select id="countDailyData" parameterType="int" resultType="int">
        <![CDATA[
        SELECT COUNT(*) FROM farm_env_info_day
        WHERE farm_idx = #{farm_idx}
        AND created_at = DATE_SUB(CURDATE(), INTERVAL 1 DAY)
        ]]>
    </select>

    <select id="countHourlyData" parameterType="int" resultType="int">
        <![CDATA[
        SELECT COUNT(*) FROM farm_env_info_hour
        WHERE farm_idx = #{farm_idx}
        AND created_at = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 HOUR), '%Y-%m-%d %H:00:00')
        ]]>
    </select>
	

</mapper>