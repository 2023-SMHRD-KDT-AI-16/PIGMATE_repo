<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.board.mapper.DetectionInfoMapper">

    <select id="getLyingCountByFarmIdx" parameterType="int" resultType="kr.board.entity.DetectionInfo">
        SELECT *
        FROM detection_info
        WHERE farm_idx = #{farm_idx}
        ORDER BY created_at ASC
    </select>

    <select id="gettimeLyingCount" parameterType="int" resultType="kr.board.entity.DetectionInfo">
       <![CDATA[
    WITH recent_data AS (
        SELECT *
        FROM (
            SELECT created_at, lying_cnt, livestock_cnt
            FROM detection_info
            WHERE farm_idx = #{farm_idx}
            ORDER BY created_at DESC
            LIMIT 15
        ) sub
        ORDER BY created_at
    ),
    hourly_intervals AS (
        SELECT 
            CASE 
                WHEN MINUTE(created_at) < 30 THEN DATE_FORMAT(created_at, '%Y-%m-%d %H:00:00')
                ELSE DATE_FORMAT(created_at, '%Y-%m-%d %H:30:00')
            END AS time_interval,
            lying_cnt, livestock_cnt
        FROM recent_data
    ),
    averaged_data AS (
        SELECT
            time_interval,
            AVG(lying_cnt) AS avg_lying_cnt,
            AVG(livestock_cnt) AS avg_livestock_cnt
        FROM hourly_intervals
        GROUP BY time_interval
    )
    SELECT 
        time_interval AS `interval`,
        avg_lying_cnt AS lyingCnt,
        avg_livestock_cnt AS livestockCnt
    FROM averaged_data
    ORDER BY `interval`;
    ]]>
    </select>

<select id="getdayLyingCount" parameterType="int" resultType="kr.board.entity.DetectionInfo">
    <![CDATA[
    SELECT created_date, AVG(lying_cnt) AS avg_lying_cnt, AVG(livestock_cnt) AS avg_livestock_cnt
    FROM (
        SELECT 
            DATE(created_at) AS created_date,
            lying_cnt,
            livestock_cnt
        FROM 
            detection_info
        WHERE 
            farm_idx = #{farm_idx}
        ORDER BY 
            created_at DESC
        LIMIT 100
    ) subquery
    GROUP BY created_date
    ORDER BY created_date DESC
    LIMIT 10;
    ]]>
</select>

    <select id="getAbnormalDetectionCount" parameterType="int" resultType="kr.board.entity.DetectionInfo">
        SELECT created_at, lying_cnt, livestock_cnt, result
        FROM detection_info
        WHERE farm_idx = #{farm_idx} AND result = 1
        ORDER BY created_at ASC
        LIMIT 10
    </select>
    
</mapper>